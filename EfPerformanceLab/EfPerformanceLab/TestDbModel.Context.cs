//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace EfPerformanceLab
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class TestDbEntities : DbContext
    {
        public TestDbEntities()
            : base("name=TestDbEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Operation> Operations { get; set; }
        public virtual DbSet<RequestLogging> RequestLoggings { get; set; }
        public virtual DbSet<User> Users { get; set; }
    
        public virtual int AddRequestLog(Nullable<System.DateTime> requestTime, Nullable<int> operationId, string ipAddress, Nullable<int> userId, string requestStatus)
        {
            var requestTimeParameter = requestTime.HasValue ?
                new ObjectParameter("RequestTime", requestTime) :
                new ObjectParameter("RequestTime", typeof(System.DateTime));
    
            var operationIdParameter = operationId.HasValue ?
                new ObjectParameter("OperationId", operationId) :
                new ObjectParameter("OperationId", typeof(int));
    
            var ipAddressParameter = ipAddress != null ?
                new ObjectParameter("IpAddress", ipAddress) :
                new ObjectParameter("IpAddress", typeof(string));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var requestStatusParameter = requestStatus != null ?
                new ObjectParameter("RequestStatus", requestStatus) :
                new ObjectParameter("RequestStatus", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddRequestLog", requestTimeParameter, operationIdParameter, ipAddressParameter, userIdParameter, requestStatusParameter);
        }
    }
}
